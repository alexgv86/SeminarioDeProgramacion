unit Fechas;

interface

Uses
  SysUtils,System.DateUtils;
Type
  Fecha = Object
  Private
    Error: Boolean;
    F: TDate;
  Public
  Procedure CargaFecha(Ingreso:String);
  Function ValidaFecha(): Boolean;
  Function SumarDias(Ingreso: Integer): String;
  Function RestarDias(Ingreso: Integer): String;
  Function MayorMenor(Fecha1,Fecha2:TDate): String;
  Function EsBisiesto(Fecha: TDate): Boolean;
  End;
implementation
  Procedure Fecha.CargaFecha(Ingreso:String);
    Begin
      try
        F := strToDate(Ingreso);
        Error := False;
      except
        on exception do
          Error := True;
      end;
    End;

  Function Fecha.ValidaFecha():Boolean;
  Begin
    ValidaFecha := Error;
  End;

  Function Fecha.SumarDias(Ingreso: Integer): String;
  Var I: TDate;
      S: String;
  begin
    I := F;
    S := DateToStr(I + Ingreso);
    SumarDias := S;
  end;

  Function Fecha.RestarDias(Ingreso: Integer): String;
  Var I: TDate;
      S: String;
  begin
    I := F;
    S := DateToStr(I - Ingreso);
    RestarDias := S;
  end;

  Function Fecha.EsBisiesto(Fecha: TDate): Boolean;
  Begin
    if IsInLeapYear(Fecha) then
      EsBisiesto := True
    else
      EsBisiesto := False;
  End;
//FECHA MAYOR O MENOR
  Function Fecha.MayorMenor(Fecha1,Fecha2:TDate): String;
  Var S: String;
      I: Integer;
  Begin
    I := Trunc(Fecha1-Fecha2);
    if I > 0 then begin
      S := 'Fecha 1 mayor a fecha 2';
    end else begin
      if I = 0 then begin
        S := 'Ambas fechas son iguales';
      end else
        S := 'Fecha 2 mayor a fecha 1';
    end;
    MayorMenor := S;
  End;

end.
